.. _ldap:

==================
LDAP configuration
==================

For integration with LDAP servers it is possible to use
the `django_auth_ldap`_ package. This package provides a lot of flexibility in
mapping LDAP users to geonode users and is able to manage user authentication.
However, in order to provide support for geonode groups and enforce group
permissions on resources, we recommend using ``django_auth_ldap`` together
with the utilities provided in the ``geonode.contrib.ldap`` app.

If you want to extract group information from LDAP and map it to geonode
permissions you will need to use the auth backend supplied in
``geonode.contrib.ldap``. This authentication backend is used together with
``django_auth_ldap`` and provides compatibility with the geonode groups.

Even though ``django_auth_ldap`` already provides a very flexible way to manage
group mappings, since geonode currently implements a non-standard way of
managing its groups and users, a custom auth backend is needed


Installation
------------

LDAP support requires LDAP development libraries

**Centos/RHEL**

   .. code-block:: console

        $sudo yum install -y openldap-devel

**Ubuntu**

   .. code-block:: console

        $sudo apt install libldap2-dev libsasl2-dev


Then install the python libraries

   .. code-block:: console

        $pip install python-ldap django-auth-ldap

Note that ``geonode.contrib.ldap`` is already installed when you install geonode


Configuration
-------------

#. Add ``geonode.contrib.ldap.backend.GeonodeLdapBackend`` as an additional auth
   backend (see example configuration below).

   You may use additional auth backends, the django authentication framework
   tries them all according to the order listed in the settings. This means that
   geonode can be setup in such a way as to permit internal organization users
   to login with their LDAP credentials, while at the same time allowing for
   casual users to use their facebook login (as long as you enable facebook
   social auth provider).

   Note that django's ``django.contrib.auth.backends.ModelBackend`` must also
   be used in order to provide full geonode integration with LDAP.

#. Set some additional configuration values. Some of these variables are
   prefixed with ``AUTH_LDAP`` (these are used directly by ``django_auth_ldap``)
   while others are prefixed with ``GEONODE_LDAP`` (these are used by
   ``geonode.contrib.ldap``). The geonode custom variables are:

   * ``GEONODE_LDAP_GROUP_PROFILE_FILTERSTR`` - This is an LDAP search fragment
     with the filter that allows querying for existing groups. See example below

   * ``GEONODE_LDAP_GROUP_NAME_ATTRIBUTE`` - This is the name of the LDAP
     attribute that will be used for deriving the geonode group name. If not
     specified it will default to ``cn``, which means that the LDAP object's
     ``common name`` will be used for generating the name of the geonode group

   Example configuration::

    # add these import lines to the top of your geonode settings file
    from django_auth_ldap import config as ldap_config
    from geonode.contrib.ldap.config import GeonodeNestedGroupOfNamesType
    import ldap

    # add both standard ModelBackend auth and geonode.contrib.ldap auth
    AUTHENTICATION_BACKENDS = (
        'django.contrib.auth.backends.ModelBackend',
        'geonode.contrib.ldap.backend.GeonodeLdapBackend',
    )

    # django_auth_ldap configuration
    AUTH_LDAP_SERVER_URI = 'ldap://example.com'
    AUTH_LDAP_BIND_DN = 'cn=admin,dc=example,dc=com'
    AUTH_LDAP_BIND_PASSWORD = 'something-secret'
    AUTH_LDAP_USER_SEARCH = ldap_config.LDAPSearch(
        'ou=people,dc=example,dc=com',
        ldap.SCOPE_SUBTREE,
        '(cn=%(user)s)'
    )
    AUTH_LDAP_GROUP_SEARCH = ldap_config.LDAPSearch(
        'ou=groups,dc=example,dc=com',
        ldap.SCOPE_SUBTREE,
    )
    AUTH_LDAP_GROUP_TYPE = GeonodeNestedGroupOfNamesType()
    AUTH_LDAP_USER_ATTR_MAP = {
        'first_name': 'cn',
        'last_name": 'sn'
    }
    AUTH_LDAP_FIND_GROUP_PERMS = True
    AUTH_LDAP_MIRROR_GROUPS_EXCEPT = [
        'test_group'
    ]

    # geonode.contrib.ldap configuration
    GEONODE_LDAP_GROUP_NAME_ATTRIBUTE = "cn"
    GEONODE_LDAP_GROUP_PROFILE_FILTERSTR = "(ou=research group)"


   The configuration seen in the example above will allow LDAP users to login to
   geonode with their LDAP credentials.

   On first login, a geonode user is created from the LDAP user and its LDAP
   attributes ``cn`` and ``sn`` are used to populate the geonode user's
   ``first_name`` and ``last_name`` profile fields.

   Any groups that the user is a member of in LDAP (under the
   ``ou=groups,dc=example,dc=com`` search base and with an
   ``(ou=research group)`` attribute) will be mapped to the corresponding
   geonode groups, even creating these groups in geonode in case they do not
   exist. The geonode user is also made a member of these geonode groups.

   Upon each login, the user's geonode group memberships are re-evaluated
   according to the information extracted from LDAP. The
   ``AUTH_LDAP_MIRROR_GROUPS_EXCEPT`` setting can be used to specify groups
   whose memberships will not be re-evaluated.

   You may also manually generate the geonode groups in advance, before users
   login. In this case, when a user logs in and the mapped LDAP group already
   exists, the user is merely added to the geonode group

   Be sure to check out `django_auth_ldap`_ for more information on the various
   configuration options.

.. _django_auth_ldap: https://django-auth-ldap.readthedocs.io/en/latest/
